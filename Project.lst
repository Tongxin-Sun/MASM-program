Microsoft (R) Macro Assembler Version 14.29.30148.0	    06/10/23 14:25:14
.Low-level I/O Procedures     (Proj6_sunto.asm		     Page 1 - 1


				TITLE Low-level I/O Procedures     (Proj6_sunto.asm)

				; Author: Tongxin Sun
				; Last Modified: 06/09/2023
				; OSU email address: sunto@oregonstate.edu
				; Course number/section:   CS271 Section 1
				; Project Number:  6               Due Date: 06/11/2023
				; Description: This program prompts the user to enter a certain number of signed 
				;			   integers from the keyboard, then displays all the entered integers
				;			   in a list. Finally, it displays the sum and truncated average of 
				;			   these integers.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Prompts the user with input requirement, and gets the user's keyboard input into 
				; memory.
				;
				; Preconditions: byteCount is type BYTE.
				;
				; Postconditions: registers EAX, ECX, EDI, and EDX are restored.
				;
				; Receives:
				; prompt	 = prompt address
				; buffer     = buffer address
				; bufferSize = buffer size
				; byteCount  = byteCount address
				; lineNumber = current line number
				;
				; returns: 
				; byteCount  = user entered string size address
				; buffer     = user entered string address
				; ---------------------------------------------------------------------------------
				mGetString MACRO prompt:REQ, buffer: REQ, bufferSize: REQ, byteCount: REQ, lineNumber: REQ
					; preserves registers
					PUSH    EAX
					PUSH    ECX
					PUSH    EDX
					PUSH    EDI

					; display the lineNumber
					PUSH    OFFSET strContainer
					PUSH    lineNumber
					CALL    WriteVal

					; displays prompt
					MOV		EDX, prompt
					CALL    WriteString

					; gets the user¡¯s keyboard input into a memory location
					MOV     EDX, buffer
					MOV     ECX, bufferSize
					CALL    ReadString

					; reads the number of bytes entered to the byteCount variable.
					CLD
					MOV     EDI, byteCount
					STOSB

					; restores registers
					POP		EDI
					POP     EDX
					POP	    ECX
					POP	    EAX

				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Print the string which is stored in a specified memory location.
				;
				; Preconditions: 
				; string is type BYTE.
				; the string can be converted to a valid signed integer no larger than 32-bit SDWORD.
				; string is 0-terminated.
				;
				; Postconditions: registers EDX is restored.
				;
				; Receives:
				; stringAdd = address of the string
				;
				; returns: 
				; The content of the string will be displayed to the console.
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO stringAdd:REQ
					PUSH    EDX
					MOV     EDX, stringAdd
					CALL    WriteString
					POP     EDX
					
				ENDM

 = 0000000A			NUMBER_OF_VALUES = 10

 00000000			.data

 00000000 50 52 4F 47 52	titlePrompt         BYTE    "PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures", 13, 10
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A
 0000003E  57 72 69 74 74						BYTE    "Written by: Tongxin Sun", 13, 10, 0
	   65 6E 20 62 79
	   3A 20 54 6F 6E
	   67 78 69 6E 20
	   53 75 6E 0D 0A
	   00
 00000058 50 6C 65 61 73	programIntro1       BYTE    "Please provide ", 0
	   65 20 70 72 6F
	   76 69 64 65 20
	   00
 00000068 20 73 69 67 6E	programIntro2       BYTE    " signed decimal integers.", 13, 10
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   0D 0A
 00000083  45 61 63 68 20						BYTE    "Each number needs to be small enough to fit inside a 32 bit register. ", 13, 10
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   0D 0A
 000000CB  41 66 74 65 72						BYTE    "After you have finished inputting the raw numbers I will display a list ", 13, 10
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 0D 0A
 00000115  6F 66 20 74 68						BYTE    "of the integers, their sum, and their average value.", 13, 10, 13, 10
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 0D 0A 0D
	   0A
 0000014D  2A 2A 45 43 31						BYTE	"**EC1: Number each line of user input and display a running subtotal of ", 13, 10
	   3A 20 4E 75 6D
	   62 65 72 20 65
	   61 63 68 20 6C
	   69 6E 65 20 6F
	   66 20 75 73 65
	   72 20 69 6E 70
	   75 74 20 61 6E
	   64 20 64 69 73
	   70 6C 61 79 20
	   61 20 72 75 6E
	   6E 69 6E 67 20
	   73 75 62 74 6F
	   74 61 6C 20 6F
	   66 20 0D 0A
 00000197  74 68 65 20 75						BYTE    "the user¡¯s valid numbers. These displays must use WriteVal.", 13, 10, 13, 10, 0
	   73 65 72 A1 AF
	   73 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 73
	   2E 20 54 68 65
	   73 65 20 64 69
	   73 70 6C 61 79
	   73 20 6D 75 73
	   74 20 75 73 65
	   20 57 72 69 74
	   65 56 61 6C 2E
	   0D 0A 0D 0A 00
 000001D8 20 50 6C 65 61	inputPrompt			BYTE	" Please enter a signed number: ", 0
	   73 65 20 65 6E
	   74 65 72 20 61
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 3A
	   20 00
 000001F8  00000032 [		strContainer		BYTE	50 DUP(?)
	    00
	   ]
 0000022A 00000032		inputBufferSize		DWORD   SIZEOF strContainer
 0000022E 00000000		inputCharCount		DWORD   ?
 00000232 00000000		outputInteger		SDWORD  ?
 00000236  0000000A [		signedIntegers		SDWORD  NUMBER_OF_VALUES DUP(?)
	    00000000
	   ]
 0000025E 45 52 52 4F 52	invalidMessage		BYTE    "ERROR: You did not enter a signed number or your number was too big.", 13, 10, 13, 10, 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   0D 0A 00
 000002A7 2C 20 00		emptySpace          BYTE    ", ", 0
 000002AA 59 6F 75 20 65	displayPrompt       BYTE    "You entered the following numbers: ", 13, 10, 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   0D 0A 00
 000002D0 54 68 65 20 73	sumPrompt           BYTE    "The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 000002EE 54 68 65 20 74	averagePrompt       BYTE    "The truncated average is: ", 0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 00000309 00000000		sum                 SDWORD  0
 0000030D 0D 0A 54 68 61	goodbyeMessage		BYTE	13, 10, "Thanks for playing!", 13, 10, 0
	   6E 6B 73 20 66
	   6F 72 20 70 6C
	   61 79 69 6E 67
	   21 0D 0A 00
 00000325 00000000		lineCount			SDWORD  0
 00000329 54 68 65 20 63	subtotalPrompt      BYTE    "The current subtotal is: ", 0
	   75 72 72 65 6E
	   74 20 73 75 62
	   74 6F 74 61 6C
	   20 69 73 3A 20
	   00

 00000000			.code
 00000000			main PROC
				; -------------------------------------------------------
				; Displays the program title, author, and introduction.
				; -------------------------------------------------------
					; program introduction
 00000000  BA 00000000 R		MOV     EDX, OFFSET titlePrompt
 00000005  E8 00000000 E		CALL    WriteString
 0000000A  E8 00000000 E		CALL    Crlf
 0000000F  BA 00000058 R		MOV     EDX, OFFSET programIntro1
 00000014  E8 00000000 E		CALL    WriteString

 00000019  68 000001F8 R		PUSH    OFFSET strContainer
 0000001E  6A 0A			PUSH    NUMBER_OF_VALUES
 00000020  E8 000001D3			CALL    WriteVal

 00000025  BA 00000068 R		MOV     EDX, OFFSET programIntro2
 0000002A  E8 00000000 E		CALL    WriteString

				; -------------------------------------------------------
				; Prompts the user for the number of integers specified by
				; NUMBER_OF_VALUES. 
				; Validates the entered integers and displays a running 
				; subtotal after the user entered each valid integer.
				; -------------------------------------------------------
					; initializes ECX to be NUMBER_OF_VALUES.
 0000002F  B9 0000000A			MOV     ECX, NUMBER_OF_VALUES

					; EDI points to the array where we will store all the 
					; inputs (i.e., signedIntegers).
 00000034  FC				CLD
 00000035  BF 00000236 R		MOV     EDI, OFFSET signedIntegers

					; iteratively read integers from the user and store 
					; them into signedIntegers.
 0000003A			_enterNumber:

					; for each valid integer entered, increment lineCount
 0000003A  FF 05 00000325 R		INC		lineCount

					; parameters passed and call the RealVal procedure
 00000040  FF 35 00000325 R		PUSH    lineCount
 00000046  68 0000025E R		PUSH    OFFSET invalidMessage
 0000004B  68 00000232 R		PUSH    OFFSET outputInteger
 00000050  68 000001D8 R		PUSH    OFFSET inputPrompt
 00000055  68 000001F8 R		PUSH    OFFSET strContainer
 0000005A  FF 35 0000022A R		PUSH    inputBufferSize
 00000060  68 0000022E R		PUSH    OFFSET inputCharCount
 00000065  E8 000000CA			CALL	ReadVal

					; outputInteger holds the signed integer converted 
					; from its ascii representation by the RealVal 
					; procedure
					; stores this 32-bit value into signedIntegers array
 0000006A  A1 00000232 R		MOV     EAX, outputInteger
 0000006F  AB				STOSD

					; calculates and displays the running subtotal
 00000070  01 05 00000309 R		ADD     sum, EAX
 00000076  BA 00000329 R		MOV     EDX, OFFSET subtotalPrompt
 0000007B  E8 00000000 E		CALL    WriteString

 00000080  68 000001F8 R		PUSH    OFFSET strContainer
 00000085  FF 35 00000309 R		PUSH    sum
 0000008B  E8 00000168			CALL    WriteVal
 00000090  E8 00000000 E		CALL    Crlf
 00000095  E8 00000000 E		CALL    Crlf

					; prompts the user to enter the next integer until 
					; all the numbers have been entered
 0000009A  E2 9E			LOOP    _enterNumber

				; -------------------------------------------------------
				; Displays all the valid integers that the user has entered.
				; -------------------------------------------------------
 0000009C  E8 00000000 E		CALL    Crlf
 000000A1  BA 000002AA R		MOV     EDX, OFFSET displayPrompt
 000000A6  E8 00000000 E		CALL    WriteString

					; iteratively display each value in signedIntegers
 000000AB  B9 0000000A			MOV     ECX, LENGTHOF signedIntegers

					; ESI points to the integer to be displayed
 000000B0  FC				CLD
 000000B1  BE 00000236 R		MOV     ESI, OFFSET signedIntegers

 000000B6			_displayIntegers:

 000000B6  AD				LODSD

					; calls the WriteVal procedure to convert each integer 
					; back into ASCII representation, and displays them
 000000B7  68 000001F8 R		PUSH    OFFSET strContainer
 000000BC  50				PUSH    EAX
 000000BD  E8 00000136			CALL    WriteVal

					; if the current number displayed is the last integer,
					; we don't want to print a separating sign (', '). 
					; So we jump to _finishDisplayIntegers
 000000C2  83 F9 01			CMP     ECX, 1
 000000C5  74 0C			JE      _displaySum

					; otherwise, writes a ", " to separate each number
 000000C7  BA 000002A7 R		MOV     EDX, OFFSET emptySpace
 000000CC  E8 00000000 E		CALL    WriteString
 000000D1  E2 E3			LOOP    _displayIntegers

				; -------------------------------------------------------
				; Displays the sum of entered integers.
				; -------------------------------------------------------
 000000D3			_displaySum:

 000000D3  E8 00000000 E		CALL    Crlf
 000000D8  BA 000002D0 R		MOV     EDX, OFFSET sumPrompt
 000000DD  E8 00000000 E		CALL    WriteString

 000000E2  68 000001F8 R		PUSH    OFFSET strContainer
 000000E7  FF 35 00000309 R		PUSH    sum
 000000ED  E8 00000106			CALL    WriteVal

				; -------------------------------------------------------
				; Displays the average of entered integers.
				; -------------------------------------------------------
					; calculate average
 000000F2  A1 00000309 R		MOV		EAX, sum
 000000F7  BB 0000000A			MOV		EBX, NUMBER_OF_VALUES
 000000FC  99				CDQ
 000000FD  F7 FB			IDIV	EBX
					
					; display truncated average
 000000FF  E8 00000000 E		CALL    Crlf
 00000104  BA 000002EE R		MOV		EDX, OFFSET averagePrompt
 00000109  E8 00000000 E		CALL	WriteString

 0000010E  68 000001F8 R		PUSH    OFFSET strContainer
 00000113  50				PUSH    EAX
 00000114  E8 000000DF			CALL    WriteVal

				; -------------------------------------------------------
				; Displays a goodbye message to the user and exit the program
				; -------------------------------------------------------
					; farewell 
 00000119  E8 00000000 E		CALL	Crlf
 0000011E  BA 0000030D R		MOV		EDX, OFFSET goodbyeMessage
 00000123  E8 00000000 E		CALL	WriteString
 00000128  E8 00000000 E		CALL	Crlf

					Invoke ExitProcess,0	; exit to operating system
 0000012D  6A 00	   *	    push   +000000000h
 0000012F  E8 00000000 E   *	    call   ExitProcess
 00000134			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Reads one input from the user, validates the input and stores the integer in memory.
				;
				; Preconditions: 
				; byteCount, buffer size are type DWORD
				; buffer length is at least 12.
				;
				; Postconditions: registers EBP, ESI, EDI, EAX, EBX, ECX, EDX are restored.
				;
				; Receives: 
				; [EBP + 8]  = address of byteCount
				; [EBP + 12] = buffer size
				; [EBP + 16] = address of buffer
				; [EBP + 20] = address of prompt
				; [EBP + 24] = address of output 
				; [EBP + 28] = address of invalidPrompt
				; [EBP + 32] = lineNumber
				;
				; Returns: 
				; The signed integer that the user entered will be stored in the addres of output.
				; ---------------------------------------------------------------------------------

 00000134			ReadVal PROC
					
					LOCAL	counter:DWORD
					LOCAL   inputInteger:SDWORD

 00000134  55		   *	    push   ebp
 00000135  8B EC	   *	    mov    ebp, esp
 00000137  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 0000013A  56				PUSH	ESI
 0000013B  57				PUSH	EDI
 0000013C  50				PUSH	EAX
 0000013D  53				PUSH	EBX
 0000013E  51				PUSH	ECX
 0000013F  52				PUSH	EDX

 00000140			_readData:
					; uses the mGetString macro to get an input from the user
					mGetString [EBP + 20], [EBP + 16], [EBP + 12], [EBP + 8], [EBP + 32]
 00000140  50		     1		PUSH    EAX
 00000141  51		     1		PUSH    ECX
 00000142  52		     1		PUSH    EDX
 00000143  57		     1		PUSH    EDI
 00000144  68 000001F8 R     1		PUSH    OFFSET strContainer
 00000149  FF 75 20	     1		PUSH    [EBP + 32]
 0000014C  E8 000000A7	     1		CALL    WriteVal
 00000151  8B 55 14	     1		MOV		EDX, [EBP + 20]
 00000154  E8 00000000 E     1		CALL    WriteString
 00000159  8B 55 10	     1		MOV     EDX, [EBP + 16]
 0000015C  8B 4D 0C	     1		MOV     ECX, [EBP + 12]
 0000015F  E8 00000000 E     1		CALL    ReadString
 00000164  FC		     1		CLD
 00000165  8B 7D 08	     1		MOV     EDI, [EBP + 8]
 00000168  AA		     1		STOSB
 00000169  5F		     1		POP		EDI
 0000016A  5A		     1		POP     EDX
 0000016B  59		     1		POP	    ECX
 0000016C  58		     1		POP	    EAX

					; sets ECX to the number of characters entered
 0000016D  8B 75 08			MOV     ESI, [EBP + 8]
 00000170  FC				CLD
 00000171  AD				LODSD
 00000172  89 45 FC			MOV     counter, EAX
 00000175  8B 4D FC			MOV     ECX, counter

					; initializes inputInteger to 0
 00000178  C7 45 F8			MOV     inputInteger, 0
	   00000000

					; ESI points to buffer
 0000017F  8B 75 10			MOV     ESI, [EBP + 16] 

					; determines if the input integer is positive or negative
 00000182  FC				CLD
 00000183  AC				LODSB
 00000184  3C 2D			CMP     AL, 45
 00000186  74 2B			JE      _negativeInteger

 00000188			_positiveInteger:

					; if the first character is the plus sign ('+'), reads the next character.
					; otherwise, continue to the positiveIntegerLoop
 00000188  3C 2B			CMP     AL, 43
 0000018A  75 02			JNE     _positiveIntegerLoop
 0000018C  AC				LODSB
 0000018D  49				DEC		ECX

 0000018E			_positiveIntegerLoop:
					; validates if the input integer is in the range [48, 57]
 0000018E  3C 30			CMP     AL, 48
 00000190  7C 4F			JL      _invalidInput
 00000192  3C 39			CMP     AL, 57
 00000194  7F 4B			JG      _invalidInput

					; if positive integer, uses the algorithm inputInteger = 10 * inputInteger + (AL - 48)
					; to calculate inputInteger iteratively.
 00000196  2C 30			SUB		AL, 48
 00000198  0F B6 D8			MOVZX   EBX, AL
 0000019B  B8 0000000A			MOV     EAX, 10
 000001A0  F7 6D F8			IMUL    inputInteger

					; if overflow, then the number is too large.
 000001A3  70 3C			JO      _invalidInput
 000001A5  89 45 F8			MOV     inputInteger, EAX
 000001A8  01 5D F8			ADD     inputInteger, EBX
 000001AB  70 34			JO      _invalidInput

 000001AD  FC				CLD     
 000001AE  AC				LODSB
 000001AF  E2 DD			LOOP    _positiveIntegerLoop
 000001B1  EB 24			JMP     _output

 000001B3			_negativeInteger:
 000001B3  49				DEC		ECX
 000001B4			_negativeIntegerLoop:

					; if negative integer, reads the next character
 000001B4  FC				CLD
 000001B5  AC				LODSB

					; validates if the input integer is in the range [48, 57]
 000001B6  3C 30			CMP     AL, 48
 000001B8  7C 27			JL      _invalidInput
 000001BA  3C 39			CMP     AL, 57
 000001BC  7F 23			JG      _invalidInput

					; uses the algorithm inputInteger = 10 * inputInteger - (AL - 48)
					; to calculate inputInteger iteratively.
 000001BE  2C 30			SUB     AL, 48
 000001C0  0F BE D8			MOVSX   EBX, AL
 000001C3  B8 0000000A			MOV     EAX, 10
 000001C8  F7 6D F8			IMUL    inputInteger
 000001CB  70 14			JO      _invalidInput
 000001CD  89 45 F8			MOV     inputInteger, EAX
 000001D0  29 5D F8			SUB     inputInteger, EBX
 000001D3  70 0C			JO      _invalidInput
 000001D5  E2 DD			LOOP    _negativeIntegerLoop

 000001D7			_output:

					; after evaluation, if the inputInteger is not too large, output 
					; the integer to output
 000001D7  8B 7D 18			MOV     EDI, [EBP + 24]
 000001DA  8B 45 F8			MOV     EAX, inputInteger
 000001DD  FC				CLD
 000001DE  AB				STOSD
 000001DF  EB 0D			JMP     _finish

					; if the input is invalid, prompts the user an error message and 
					; lets the user enter again.
 000001E1			_invalidInput:
 000001E1  8B 55 1C			MOV     EDX, [EBP + 28]
 000001E4  E8 00000000 E		CALL    WriteString
 000001E9  E9 FFFFFF52			JMP     _readData

 000001EE			_finish:
 000001EE  5A				POP	    EDX
 000001EF  59				POP  	ECX
 000001F0  5B				POP 	EBX
 000001F1  58				POP 	EAX
 000001F2  5F				POP 	EDI
 000001F3  5E				POP 	ESI
 000001F4  C9		   *	    leave  
 000001F5  C2 001C			RET     28

 000001F8			ReadVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Convert a numeric SDWORD value (input parameter, by value) to a string of ASCII digits.
				; Invoke the mDisplayString macro to print the ASCII representation of the SDWORD value 
				; to the console.
				;
				; Preconditions: 
				; integer is type SDWORD
				; strOutput is type BYTE and has a length no less than 12
				;
				; Postconditions: registers EAX, EBX, ECX, EDX, EBP and EDI are restored.
				;
				; Receives: 
				; [EBP + 8]  = integer
				; [EBP + 12] = address of strOutput
				;
				; Returns: the integer will be printed to the console.
				; ---------------------------------------------------------------------------------
 000001F8			WriteVal PROC

 000001F8  55				PUSH	EBP
 000001F9  8B EC			MOV		EBP, ESP

 000001FB  50				PUSH    EAX
 000001FC  51				PUSH    ECX
 000001FD  53				PUSH    EBX
 000001FE  52				PUSH    EDX
 000001FF  57				PUSH    EDI
					
					; initializes EAX to be the integer that we want to convert
 00000200  8B 45 08			MOV     EAX, [EBP + 8]

					; initializes ECX
 00000203  B9 00000000			MOV		ECX, 0

 00000208			_integerToString:

					; increment ECX after reaching each character
 00000208  41				INC		ECX

					; iteratively divides the integer by 10 to get the remainder
 00000209  99				CDQ
 0000020A  BB 0000000A			MOV     EBX, 10
 0000020F  F7 FB			IDIV    EBX

					; when the quotient = 0, stop the loop and jumpt to finish
 00000211  83 F8 00			CMP     EAX, 0
 00000214  74 10			JE      _finish

					; when the quotient < 0, the integer is negative, jumpt to _negativeInteger
					; to continue the loop
 00000216  7C 06			JL      _negativeInteger

					; otherwise, the integer is positive, continue the loop
					; find its ASCII representation and push to stack
 00000218  83 C2 30			ADD     EDX, 48
 0000021B  52				PUSH    EDX
 0000021C  EB EA			JMP     _integerToString

 0000021E			_negativeInteger:
					; if negative integer, we need to negate the remainder 
 0000021E  F7 DA			NEG     EDX

					; then, find its ASCII representation and push to stack
 00000220  83 C2 30			ADD     EDX, 48
 00000223  52				PUSH    EDX
 00000224  EB E2			JMP     _integerToString

					; when quotient is 0, we need to finish converting and push
					; the remainder to the stack
 00000226			_finish:
					; if the remainder < 0, jumpt to _negativeFinish 
 00000226  83 FA 00			CMP     EDX, 0
 00000229  7C 06			JL      _negativeFinish

					; otherwise, convert the final remainder to the ASCII 
					; representation to push to stack
 0000022B  83 C2 30			ADD     EDX, 48
 0000022E  52				PUSH    EDX
 0000022F  EB 09			JMP     _storeString

 00000231			_negativeFinish:
					; if the remainder is negative, we need to negate it before
					; pushing it to the stack
 00000231  F7 DA			NEG     EDX
 00000233  83 C2 30			ADD     EDX, 48
 00000236  52				PUSH    EDX

					; finally, push a minus sign ('-') to the stack
 00000237  6A 2D			PUSH    45
 00000239  41				INC     ECX

					; pop ASCII values iteratively
 0000023A			_storeString:
					; EDI points to the strOutput
 0000023A  8B 7D 0C			MOV     EDI, [EBP + 12]
 0000023D  FC				CLD
 0000023E			_storeStringLoop:
 0000023E  58				POP     EAX
 0000023F  AA				STOSB
 00000240  E2 FC			LOOP    _storeStringLoop

					; finally put a terminating 0 at the end
 00000242  B0 00			MOV     AL, 0
 00000244  AA				STOSB

					; print the ASCII representation of the SDWORD value to the console
					mDisplayString [EBP + 12]
 00000245  52		     1		PUSH    EDX
 00000246  8B 55 0C	     1		MOV     EDX, [EBP + 12]
 00000249  E8 00000000 E     1		CALL    WriteString
 0000024E  5A		     1		POP     EDX

 0000024F  5F				POP     EDI
 00000250  5A				POP     EDX
 00000251  5B				POP     EBX
 00000252  59				POP     ECX
 00000253  58				POP     EAX

 00000254  5D				POP		EBP
 00000255  C2 0008			RET     8

 00000258			WriteVal ENDP
				END main


Microsoft (R) Macro Assembler Version 14.29.30148.0	    06/10/23 14:25:14
.Low-level I/O Procedures     (Proj6_sunto.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000343 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000258 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000134 _TEXT	Length= 000000C4 Public STDCALL
  counter  . . . . . . . . . . .	DWord	 bp - 00000004
  inputInteger . . . . . . . . .	DWord	 bp - 00000008
  _readData  . . . . . . . . . .	L Near	 00000140 _TEXT	
  _positiveInteger . . . . . . .	L Near	 00000188 _TEXT	
  _positiveIntegerLoop . . . . .	L Near	 0000018E _TEXT	
  _negativeInteger . . . . . . .	L Near	 000001B3 _TEXT	
  _negativeIntegerLoop . . . . .	L Near	 000001B4 _TEXT	
  _output  . . . . . . . . . . .	L Near	 000001D7 _TEXT	
  _invalidInput  . . . . . . . .	L Near	 000001E1 _TEXT	
  _finish  . . . . . . . . . . .	L Near	 000001EE _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001F8 _TEXT	Length= 00000060 Public STDCALL
  _integerToString . . . . . . .	L Near	 00000208 _TEXT	
  _negativeInteger . . . . . . .	L Near	 0000021E _TEXT	
  _finish  . . . . . . . . . . .	L Near	 00000226 _TEXT	
  _negativeFinish  . . . . . . .	L Near	 00000231 _TEXT	
  _storeString . . . . . . . . .	L Near	 0000023A _TEXT	
  _storeStringLoop . . . . . . .	L Near	 0000023E _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000134 Public STDCALL
  _enterNumber . . . . . . . . .	L Near	 0000003A _TEXT	
  _displayIntegers . . . . . . .	L Near	 000000B6 _TEXT	
  _displaySum  . . . . . . . . .	L Near	 000000D3 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMBER_OF_VALUES . . . . . . . .	Number	 0000000Ah   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
averagePrompt  . . . . . . . . .	Byte	 000002EE _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displayPrompt  . . . . . . . . .	Byte	 000002AA _DATA	
emptySpace . . . . . . . . . . .	Byte	 000002A7 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbyeMessage . . . . . . . . .	Byte	 0000030D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputBufferSize  . . . . . . . .	DWord	 0000022A _DATA	
inputCharCount . . . . . . . . .	DWord	 0000022E _DATA	
inputPrompt  . . . . . . . . . .	Byte	 000001D8 _DATA	
invalidMessage . . . . . . . . .	Byte	 0000025E _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineCount  . . . . . . . . . . .	DWord	 00000325 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
outputInteger  . . . . . . . . .	DWord	 00000232 _DATA	
programIntro1  . . . . . . . . .	Byte	 00000058 _DATA	
programIntro2  . . . . . . . . .	Byte	 00000068 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
signedIntegers . . . . . . . . .	DWord	 00000236 _DATA	
strContainer . . . . . . . . . .	Byte	 000001F8 _DATA	
subtotalPrompt . . . . . . . . .	Byte	 00000329 _DATA	
sumPrompt  . . . . . . . . . . .	Byte	 000002D0 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000309 _DATA	
titlePrompt  . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
